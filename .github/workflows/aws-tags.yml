# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a tag is pushed.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Build and Deploy to Amazon ECS

# Trigger build only for main and staging branches
on:
  push:
    branches:
      - staging
      - main

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: hello-world-ecr
  ECS_SERVICE: hello-world-service
  ECS_CLUSTER: hello-world-cluster
  ECS_TASK: hello-world-task
  ECS_TASK_DEFINITION_TEMPLATE: ecs/task_definition_template.json
  CONTAINER_NAME: hello-world-container

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set environment variables based on branch
      id: set-env-vars
      run: |
        if [[ $GITHUB_REF_NAME == "main" ]]; then
          echo "Setting up env vars for Prod"
          APPLICATION_ENV=prod
          AWS_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          CONTAINER_VARS=$(cat ecs/prod_container_env_vars)
        elif [[ $GITHUB_REF_NAME == "staging" ]]; then
          echo "Setting up env vars for Staging"
          APPLICATION_ENV=staging
          AWS_ACCESS_KEY_ID=${{ secrets.STAGING_AWS_ACCESS_KEY_ID_PROD }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY_PROD }}
          CONTAINER_VARS=$(cat ecs/staging_container_env_vars)
        else
          echo "ERROR - Unrecognised git ref. Couldn't set env vars."
          exit 1
        fi

    - name: Print all environment variables
      id: print-env-vars
      run: |
        env

    - name: Configure AWS credentials
      id: aws-login
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.ref_name }}
      working-directory: ./application
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Render Amazon ECS task definition from template in repo
      id: render-task-def
      uses: danielr1996/envsubst-action@1.0.0
      env:
        AWS_ACCOUNT_ID: ${{ steps.aws-login.outputs.aws-account-id }}
      with:
        input: ${{ env.ECS_TASK_DEFINITION_TEMPLATE }}
        output: ${{ env.ECS_TASK_DEFINITION_TEMPLATE }}.rendered.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_TEMPLATE }}.rendered.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
        environment-variables: ${{ env.CONTAINER_VARS }} # Loaded from file in repo

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
