# This workflow can be triggered manually to allow a previously built container image to be redeployed by creating a new task
# definition (with the old container image) and using it to update the ECS service. This could be used for rolling back deployments
# to a previous container image.
#
# NOTE: When triggering this workflow, you must first specify a git ref. This is used to determine which GitHub Workflow file to use
# to run the workflow. In most cases this should be the same as the environment you're re-deploying, but not necessarily. If you
# have made changes to the workflow file, then you must be extremely careful and analyse whether using this method to roll back
# is appropriate.
#
# After choosing the git ref for triggering the workflow, you will be prompted to specify the _environment_ you wish to deploy to,
# and the commit ID / container ID you wish to redeploy (it is assumed that this commit ID has previously been built successfully
# and that a container image with this tag still exists in ECR). The workflow will build and deploy a new task definition which is
# rendered using the previously-built container image, and task definition template file and variables which were present in the
# repo at the commit ID you specify.
#
# The requirements to use this workflow are the same as those documented in aws-deploy.yml.

name: Manual deploy existing image to Amazon ECS

# Only build when manually triggered
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - prod
      commit_id:
        description: 'Container image (commit ID) to deploy'
        required: true
        type: string

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: hello-world-ecr
  ECS_SERVICE: hello-world-service
  ECS_CLUSTER: hello-world-cluster
  ECS_TASK: hello-world-task
  ECS_TASK_DEFINITION_TEMPLATE: ecs/task_definition_template.json
  ECS_TASK_DEFINITION_VARS_STAGING: ecs/staging_container_env_vars
  ECS_TASK_DEFINITION_VARS_PROD: ecs/prod_container_env_vars
  CONTAINER_NAME: hello-world-container

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.commit_id }}

    - name: Set environment variables based on branch
      # Because we don't have access to the GitHub Enterprise _environments_ feature, we work around this by using the logic below
      # to set environment variables (including AWS credentials) based on what branch triggered the build.
      #
      # To make the environment variables available to subsequent steps we must write them to the GITHUB_ENV environment file
      # The CONTAINER_VARS multi-line string is set as per https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
      run: |
        if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
          echo "Setting up env vars for Prod"
          echo "AWS_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "CONTAINER_VARS<<EOF" >> $GITHUB_ENV
          cat {{ env.ECS_TASK_DEFINITION_VARS_PROD }} >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

        elif [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
          echo "Setting up env vars for Staging"
          echo "AWS_ACCESS_KEY_ID=${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "CONTAINER_VARS<<EOF" >> $GITHUB_ENV
          cat {{ env.ECS_TASK_DEFINITION_VARS_STAGING }} >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

        else
          echo "ERROR - Unrecognised git ref. Couldn't set env vars."
          exit 1
        fi

    - name: Configure AWS credentials
      id: aws-login
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Render Amazon ECS task definition from template in repo
      id: render-task-def
      uses: danielr1996/envsubst-action@1.0.0
      env:
        # Get AWS account number based on our AWS credentials
        AWS_ACCOUNT_ID: ${{ steps.aws-login.outputs.aws-account-id }}
      with:
        input: ${{ env.ECS_TASK_DEFINITION_TEMPLATE }}
        output: ${{ env.ECS_TASK_DEFINITION_TEMPLATE }}.rendered.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_TEMPLATE }}.rendered.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.event.inputs.commit_id }}
        # Container environment vars are loaded from a file in the repo
        environment-variables: ${{ env.CONTAINER_VARS }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
